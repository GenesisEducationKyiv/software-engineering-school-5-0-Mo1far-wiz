# https://taskfile.dev

version: '3'

dotenv:
  - .env

vars:
  BINARY_NAME: 'weather-service'
  MAIN_PATH: './cmd/main.go'
  DB_URL: 'postgres://{{.DB_USER}}:{{.DB_PASSWORD}}@{{.DB_HOST}}:{{.DB_PORT}}/{{.DB_NAME}}?sslmode={{.DB_SSL_MODE}}'

tasks:
  lint:
    desc: Runs Linter.
    cmds:
      - bash -c "golangci-lint run --config <(curl -s https://raw.githubusercontent.com/fabl3ss/genesis-se-school-linter/refs/heads/main/.golangci.yaml)"
    silent: true

  up:
    desc: Runs docker-compose images.
    cmds:
      - echo "Starting all services..."
      - docker-compose up -d
    silent: true

  down:
    desc: Downs docker-compose images.
    cmds:
      - echo "Stopping all services..."
      - docker-compose down
    silent: true

  db-up:
    desc: Runs database image.
    cmds:
      - echo "Starting database container..."
      - docker-compose up -d postgres
    silent: true

  db-down:
    desc: Downs database image.
    cmds:
      - echo "Stopping database container..."
      - docker-compose stop postgres
    silent: true

  clean:
    desc: Deletes bin/ and runs `go clean`.
    cmds:
      - rm -rf bin
      - go clean
    silent: true

  build:
    desc: Builds project binary {{.BINARY_NAME}}.
    cmds:
      - mkdir -p bin
      - go build -o bin/{{.BINARY_NAME}} {{.MAIN_PATH}}
    silent: true
    requires:
      vars: [BINARY_NAME, MAIN_PATH]

  run:
    desc: Builds project binary {{.BINARY_NAME}} and runs it.
    cmds:
      - task: build
      - APP_PORT={{.APP_PORT}} \
        DB_URL="{{.DB_URL}}" \
        ./bin/{{.BINARY_NAME}}
    silent: true
    requires:
      vars: [APP_PORT, DB_URL, BINARY_NAME]

  migrate-up:
    desc: Runs migrations in folder {{.MIGRATION_PATH}}.
    cmds:
      - migrate -path={{.MIGRATION_PATH}} -database="{{.DB_URL}}" up
    silent: true
    requires:
      vars: [MIGRATION_PATH, DB_URL]

  migrate-down:
    desc: Runs migrations down in folder {{.MIGRATION_PATH}}.
    cmds:
      - migrate -path={{.MIGRATION_PATH}} -database="{{.DB_URL}}" down
    silent: true
    requires:
      vars: [MIGRATION_PATH, DB_URL]