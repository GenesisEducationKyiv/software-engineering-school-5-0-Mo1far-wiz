// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/api/handlers/subscription.go
//
// Generated by this command:
//
//	mockgen -source=./internal/api/handlers/subscription.go -destination=./internal/api/handlers/mocks/mock_subscription.go
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"
	models "weather/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionStore is a mock of SubscriptionStore interface.
type MockSubscriptionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionStoreMockRecorder
	isgomock struct{}
}

// MockSubscriptionStoreMockRecorder is the mock recorder for MockSubscriptionStore.
type MockSubscriptionStoreMockRecorder struct {
	mock *MockSubscriptionStore
}

// NewMockSubscriptionStore creates a new mock instance.
func NewMockSubscriptionStore(ctrl *gomock.Controller) *MockSubscriptionStore {
	mock := &MockSubscriptionStore{ctrl: ctrl}
	mock.recorder = &MockSubscriptionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionStore) EXPECT() *MockSubscriptionStoreMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockSubscriptionStore) Confirm(ctx context.Context, token string) (models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", ctx, token)
	ret0, _ := ret[0].(models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm.
func (mr *MockSubscriptionStoreMockRecorder) Confirm(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockSubscriptionStore)(nil).Confirm), ctx, token)
}

// Create mocks base method.
func (m *MockSubscriptionStore) Create(arg0 context.Context, arg1 *models.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionStoreMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscriptionStore)(nil).Create), arg0, arg1)
}

// Unsubscribe mocks base method.
func (m *MockSubscriptionStore) Unsubscribe(ctx context.Context, token string) (models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, token)
	ret0, _ := ret[0].(models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscriptionStoreMockRecorder) Unsubscribe(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscriptionStore)(nil).Unsubscribe), ctx, token)
}

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
	isgomock struct{}
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailSender) SendEmail(to, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailSenderMockRecorder) SendEmail(to, subject, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailSender)(nil).SendEmail), to, subject, body)
}

// MockSubscriptionTargetManager is a mock of SubscriptionTargetManager interface.
type MockSubscriptionTargetManager struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionTargetManagerMockRecorder
	isgomock struct{}
}

// MockSubscriptionTargetManagerMockRecorder is the mock recorder for MockSubscriptionTargetManager.
type MockSubscriptionTargetManagerMockRecorder struct {
	mock *MockSubscriptionTargetManager
}

// NewMockSubscriptionTargetManager creates a new mock instance.
func NewMockSubscriptionTargetManager(ctrl *gomock.Controller) *MockSubscriptionTargetManager {
	mock := &MockSubscriptionTargetManager{ctrl: ctrl}
	mock.recorder = &MockSubscriptionTargetManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionTargetManager) EXPECT() *MockSubscriptionTargetManagerMockRecorder {
	return m.recorder
}

// AddTarget mocks base method.
func (m *MockSubscriptionTargetManager) AddTarget(sub models.Subscription) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTarget", sub)
}

// AddTarget indicates an expected call of AddTarget.
func (mr *MockSubscriptionTargetManagerMockRecorder) AddTarget(sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTarget", reflect.TypeOf((*MockSubscriptionTargetManager)(nil).AddTarget), sub)
}

// RemoveTarget mocks base method.
func (m *MockSubscriptionTargetManager) RemoveTarget(email, frequency string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveTarget", email, frequency)
}

// RemoveTarget indicates an expected call of RemoveTarget.
func (mr *MockSubscriptionTargetManagerMockRecorder) RemoveTarget(email, frequency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTarget", reflect.TypeOf((*MockSubscriptionTargetManager)(nil).RemoveTarget), email, frequency)
}
