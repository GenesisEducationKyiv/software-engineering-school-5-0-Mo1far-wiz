// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/mailer/target.go
//
// Generated by this command:
//
//	mockgen -source=./internal/mailer/target.go -destination=./internal/mailer/mocks/mock_target.go
//

// Package mock_mailer is a generated GoMock package.
package mock_mailer

import (
	context "context"
	reflect "reflect"
	models "weather/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockTargetStore is a mock of TargetStore interface.
type MockTargetStore struct {
	ctrl     *gomock.Controller
	recorder *MockTargetStoreMockRecorder
	isgomock struct{}
}

// MockTargetStoreMockRecorder is the mock recorder for MockTargetStore.
type MockTargetStoreMockRecorder struct {
	mock *MockTargetStore
}

// NewMockTargetStore creates a new mock instance.
func NewMockTargetStore(ctrl *gomock.Controller) *MockTargetStore {
	mock := &MockTargetStore{ctrl: ctrl}
	mock.recorder = &MockTargetStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetStore) EXPECT() *MockTargetStoreMockRecorder {
	return m.recorder
}

// GetSubscribed mocks base method.
func (m *MockTargetStore) GetSubscribed(ctx context.Context) ([]models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribed", ctx)
	ret0, _ := ret[0].([]models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribed indicates an expected call of GetSubscribed.
func (mr *MockTargetStoreMockRecorder) GetSubscribed(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribed", reflect.TypeOf((*MockTargetStore)(nil).GetSubscribed), ctx)
}
