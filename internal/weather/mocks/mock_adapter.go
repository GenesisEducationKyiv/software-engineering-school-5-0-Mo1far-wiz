// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/weather/adapter.go
//
// Generated by this command:
//
//	mockgen -source=./internal/weather/adapter.go -destination=./internal/weather/mocks/mock_adapter.go
//

// Package mock_weather is a generated GoMock package.
package mock_weather

import (
	context "context"
	reflect "reflect"
	models "weather/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockAPIInterface is a mock of APIInterface interface.
type MockAPIInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAPIInterfaceMockRecorder
	isgomock struct{}
}

// MockAPIInterfaceMockRecorder is the mock recorder for MockAPIInterface.
type MockAPIInterfaceMockRecorder struct {
	mock *MockAPIInterface
}

// NewMockAPIInterface creates a new mock instance.
func NewMockAPIInterface(ctrl *gomock.Controller) *MockAPIInterface {
	mock := &MockAPIInterface{ctrl: ctrl}
	mock.recorder = &MockAPIInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIInterface) EXPECT() *MockAPIInterfaceMockRecorder {
	return m.recorder
}

// GetCityWeather mocks base method.
func (m *MockAPIInterface) GetCityWeather(ctx context.Context, city string) (models.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityWeather", ctx, city)
	ret0, _ := ret[0].(models.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityWeather indicates an expected call of GetCityWeather.
func (mr *MockAPIInterfaceMockRecorder) GetCityWeather(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityWeather", reflect.TypeOf((*MockAPIInterface)(nil).GetCityWeather), ctx, city)
}
